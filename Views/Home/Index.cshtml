<h3 id="title">Start a room</h3>
<form id="createRoom">
	<input id="sessionInput">
	<button disabled="" type="submit">Create it!</button>
</form>
<p id="subTitle"></p>
<div>
	<button id="screenShareButton">share screen</button>
	(https required for screensharing to work)
</div>
<hr>
<div class="videoContainer">
	<video id="localVideo" style="height: 150px;" oncontextmenu="return false;"></video>
	<meter id="localVolume" class="volume" min="-45" max="-20" high="-25" low="-40" value="0"></meter>
</div>
<div id="localScreenContainer" class="videoContainer">
</div>
<div id="remotes"></div>
<hr>
<div>
	<h3>A note on connectivity issues</h3>
	If you see black videos from peers or the connection state displayed ontop of those videos
	either hangs in <i>Connecting to peer...</i> or changes to <i>Connection failed</i>, a direct peer-to-peer connection could not be established.
	<br>
	This typically means that a TURN server is required. This <a href="http://www.html5rocks.com/en/tutorials/webrtc/infrastructure/#after-signaling-using-ice-to-cope-with-nats-and-firewalls">tutorial</a> explains the problem.
	You can check if those peers can connect each other on <a href="https://talky.io">talky.io</a> which runs a TURN server.
</div>
<div>
	Want to know more about how some of these features work? Check the <a href="//simplewebrtc.com/notsosimple.html">documentation</a>
</div>

@section Scripts {
	<script src="//simplewebrtc.com/latest-v2.js"></script>
	@Scripts.Render("~/bundles/signalr")
	@Scripts.Render("~/bundles/demo")
}